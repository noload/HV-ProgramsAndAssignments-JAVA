-- Basic Queries:

-- 1. Retrieve a list of all customers along with their email addresses.
select * from customers;

-- 2. Find the total number of orders placed by each customer.
select customers.first_name, count(*) as total_orders from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id;

-- 3. List all products along with their prices.
select * from products;

-- 4. Retrieve the category with the highest number of products.
select count(*) as total_no_of_products,c.category_name from products p join categories c on p.category_id = c.category_id group by c.category_id order by total_no_of_products desc limit 1;

-- Intermediate Queries:

-- 5. Find all customers who have not placed any orders .
select c.first_name,c.last_name from customers c left join orders o on c.customer_id =o.customer_id where o.customer_id is null;

-- 6. List the products with the highest and lowest prices.
select product_name, price from products where price=(select max(price) from products) or price = (select  min(price) from products);

-- 7. Calculate the average order amount for each customer.
select customers.first_name, count(*) as total_orders, avg(total_amount) as avg_amt from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id;


-- 8. Find the categories that do not have any products.
select category_name from categories c left join products p on c.category_id =p.category_id where p.category_id is null;

-- Advanced Queries:

-- 9. Retrieve a list of customers who have placed orders for products with a price higher than $100.
select customers.first_name, count(*) as total_orders, sum(total_amount) as total_purchase from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having total_purchase > 100 ;


-- 10. List the customers who have placed orders for products from at least three different categories.
WITH OrderCategories AS (
    SELECT o.customer_id, p.category_id
    FROM Orders o
    JOIN Products p ON o.order_id = p.product_id
)
SELECT c.customer_id, c.first_name, c.last_name, c.email
FROM Customers c
JOIN (
    SELECT customer_id
    FROM OrderCategories
    GROUP BY customer_id
    HAVING COUNT(DISTINCT category_id) >= 3
) sub_query ON c.customer_id = sub_query.customer_id;

-- 11. Find the products with the highest and lowest average customer ratings (if a rating table is available).
-- rating table is not available
-- not able to do with given schema

-- 12. Calculate the total revenue generated from each category.
select c.category_id,c.category_name,sum(p.price) as total_revenue from products p join categories c on p.category_id=c.category_id group by p.category_id;

-- Complex Queries:

-- 13. Retrieve the names of customers who have placed orders in the last 30 days.
SELECT DISTINCT o1.customer_id
FROM orders o1
JOIN orders o2
  ON o1.customer_id = o2.customer_id
 AND o1.order_id <> o2.order_id
 AND ABS(DATEDIFF(day, o1.order_date, o2.order_date)) < 30

-- 14. List the products that have been out of stock for more than 7 days.
SELECT product_id, product_name
FROM Products
WHERE out_of_stock_date <= CURDATE() - INTERVAL 7 DAY;


-- 15. Find the products that have the highest fluctuation in price (i.e., the products where the difference between the highest and lowest prices is the greatest).

-- 16. Create a summary report showing the category names, the total number of products in each category, and the total revenue generated from products in each category.
  c.category_name,COUNT(DISTINCT p.product_id) AS total_products,SUM(o.total_amount) AS total_revenue FROM Categories c LEFT JOIN Products p ON c.category_id p.category_id LEFT JOIN Orders o ON p.product_id = (SELECT product_id FROM Orders WHERE customer_id = o.customer_id LIMIT 1)
GROUP BY c.category_id, c.category_name ORDER BY total_revenue DESC;

-- Expert-Level Queries:

-- 17. Retrieve a list of customers who have placed orders for every product in a specific category.

-- 18. Calculate the average order amount for each month over the past year.
SELECT 
    MONTH(order_date) AS month,
    YEAR(order_date) AS year,
    AVG(total_amount) AS average_order_amount
FROM Orders
WHERE order_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()
GROUP BY MONTH(order_date), YEAR(order_date)
ORDER BY year, month;

-- 19. Find the customers who have placed orders with a total amount that is significantly higher than their average order amount.

-- 20. Create a report that displays the top 5 best-selling products in each category.

